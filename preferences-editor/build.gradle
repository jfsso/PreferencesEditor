apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion '23.0.2'

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        versionCode 1
        versionName "$version"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    dexOptions {
        preDexLibraries = !rootProject.ext.ci
    }
}

dependencies {
    compile 'com.jakewharton:process-phoenix:1.0.2'
}

install {
    repositories.mavenInstaller {
        pom.project {
            name 'Preferences Editor'
            description 'Preferences Editor makes it easy to add, edit, remove keys from shared preferences files.'
            url 'https://github.com/jfsso/PreferencesEditor'
            inceptionYear '2015'

            packaging 'aar'
            groupId 'jp.joao'
            artifactId 'preferences-editor'
            version '1.0.0'

            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
            scm {
                connection 'https://github.com/jfsso/PreferencesEditor.git'
                url 'https://github.com/jfsso/PreferencesEditor'

            }
            developers {
                developer {
                    id 'jfsso'
                    name 'Jo√£o Orui'
                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}

task findConventions << {
    println project.getConvention()
}
